# Angular (`ng-something`) {{{
snippet ng-component
	angular
		.module('app')
		.run($router => $router.when('/${1:foo}').component('$1Ctrl'))
		.component('$1Ctrl', {
			templateUrl: '/units/$1/list.tmpl.html',
			controller: function() {
				var $ctrl = this;
			},
		});

snippet ng-controller
	angular
		.module('app')
		.run($router => $router.when('/${1:foo}').component('$1Ctrl'))
		.component('$1Ctrl', {
			templateUrl: '/units/$1/list.tmpl.html',
			controller: function() {
				var $ctrl = this;
			},
		});

snippet ng-directive
	angular
		.module('app')
		.directive('${1:fooDirective}', function() {
			return {
				scope: {
					title: '='
				},
				restrict: 'AE',
				template: `
					<h3>
						{{title}}
					</h3>
				`,
				controller: function($scope) {

				},
				link: function($scope, elem, attr, ctrl) {
					elem.find('h3').bind('click', function(e) {
						alert('Hello World!');
					});
				}
			}
		})

snippet ng-factory
	angular
		.module('app')
		.factory('${1:MyFactory}', function() {
		})

snippet ng-filter
	angular
		.module('app')
		.filter('${1:fooBarFilter}', function() {
			return function(value) {
				if (!value) return;

				${2:return value;}
			};
		})

snippet ng-model
	angular
		.module('app')
		.factory('${1:Widget}', function($resource) {
			return $resource('/api/${2:widget}s/:$2id', {}, {
			});
		})

snippet ng-select-array
	<select ng-model="${1:user}id" ng-options="$1.$1id as $1.name for $1 in $1s"></select>

snippet ng-select-hash
	<select ng-model="${1:types}" ng-options="k as v for (k,v) in $1"></select>
# }}}

# Colors {{{
snippet blue
	app.log.colors.blue($1)

snippet cyan
	app.log.colors.cyan($1)

snippet green
	app.log.colors.green($1)

snippet red
	app.log.colors.red($1)

snippet yellow
	app.log.colors.yellow($1)
# }}}

# Chai {{{
snippet chai
	import {expect} from 'chai';

	describe('$1', ()=> {
		$2
	});

snippet describe
	describe('$1', ()=> {
		$2
	});

snippet it
	it('${1:should}', ()=> {
		$2
	});
# }}}

# Express (`app.something`) {{{
snippet app.get
	app.get('/${1:widgets}', function(req, res) {
		$2
	});

snippet app.post
	app.post('/${1:widgets}', function(req, res) {
		$2
	});
# }}}

# Promises {{{
snippet Promise.wait
	new Promise(resolve => setTimeout(()=> resolve($1), ${2:1000}))

snippet .then
	.then(()=> $1)

snippet .then{
	.then(()=> {
		$1
	})

snippet .thenc
	.then(()=> console.log($1))

snippet .thenf
	// $1 {{{
	.then(()=> $2)
	// }}}

snippet .thens
	// Sanity checks {{{
	.then(()=> {
		$1
	})
	// }}}
# }}}

# Module import / require {{{
snippet "var _"
	var _ = require('lodash');

snippet import
	import ${1/^.*\/(.+)$/$1/} from '$1';

snippet "import _"
	import {$1} from 'lodash';

snippet "import @m"
	import {$1} from '@momsfriendlydevco/${2:1}';

snippet var
	var ${1:module} = require("$1");
# }}}

# General JSDoc {{{
snippet /**
	/**
	* $1
	*/

snippet @pa
	@param {Array} $1

snippet @pb
	@param {Boolean} $1

snippet @pf
	@param {Function} $1 called as `($2)`

snippet @po
	@param {Object} $1

snippet @pn
	@param {Number} $1

snippet @ps
	@param {String} $1

snippet "@param {O"
	@param {Object} [options] Additional options to mutate behaviour

snippet @poo
	@param {Object} [options] Additional options to mutate behaviour

snippet @rp
	@returns {Promise} A promise which resolves when the operation has completed

snippet "@returns {P"
	@returns {Promise} A promise which resolves when the operation has completed

snippet "@returns {O"
	@returns {Object} This chainable instance

snippet lets
	let settings = {
		$1
		...options,
	};

snippet "let s"
	let settings = {
		$1
		...options,
	};

snippet o.
	options.
# }}}

# General JavaScript {{{
snippet //{
		// $1 {{{

snippet //}
		// }}}

snippet .map
	.map(${1:item} => {
		console.log('MAP ${1/^(.*)$/\U$0\E/}:', $1);
		return $1;
	})

snippet .tap
	.then(${1:v} => {
		console.log('TAP', {$1: $1});
		return $1;
	})

snippet .dtap
	.then(v => {
		console.debug('$1', v);
		return v;
	})

snippet .tapd
	.then(v => {
		debug('$1', v);
		return v;
	})

snippet var
	var $1 = require('${1}');

snippet throw
	throw new Error(`${1}`);
# }}}

# General words {{{
snippet @m
	@momsfriendlydevco

snippet @mfdc
	@momsfriendlydevco
# }}}
